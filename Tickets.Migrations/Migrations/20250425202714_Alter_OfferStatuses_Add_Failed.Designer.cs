// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tickets.DataAccess;

#nullable disable

namespace Tickets.Migrations.Migrations
{
    [DbContext(typeof(TicketsDbContext))]
    [Migration("20250425202714_Alter_OfferStatuses_Add_Failed")]
    partial class Alter_OfferStatuses_Add_Failed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Tickets.Domain.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Tickets.Domain.Entities.Offer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Discount")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Offers", t =>
                        {
                            t.HasCheckConstraint("CK_Status", "[Status] IN (\r\n                    N'Created'\r\n                    ,N'Sent'\r\n                    ,N'Paid'\r\n                    ,N'Declined'\r\n                    ,N'Failed'\r\n                )");
                        });
                });

            modelBuilder.Entity("Tickets.Domain.Entities.PriceLevel", b =>
                {
                    b.Property<string>("Level")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<double>("PriceMultiplier")
                        .HasColumnType("float");

                    b.HasKey("Level");

                    b.ToTable("PriceLevels", t =>
                        {
                            t.HasCheckConstraint("CK_Level", "[Level] IN (\r\n                    N'Adult'\r\n                    ,N'Child'\r\n                    ,N'VIP'\r\n                )");
                        });
                });

            modelBuilder.Entity("Tickets.Domain.Entities.Row", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Number")
                        .HasColumnType("int");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.HasIndex("Number", "SectionId")
                        .IsUnique()
                        .HasFilter("[Number] IS NOT NULL");

                    b.ToTable("Rows");
                });

            modelBuilder.Entity("Tickets.Domain.Entities.Seat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Number")
                        .HasColumnType("int");

                    b.Property<Guid?>("OfferId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PriceLevel")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid?>("RowId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("OfferId");

                    b.HasIndex("PriceLevel");

                    b.HasIndex("RowId");

                    b.ToTable("Seats", t =>
                        {
                            t.HasCheckConstraint("CK_PriceLevel", "[PriceLevel] IN (\r\n                    N'Adult'\r\n                    ,N'Child'\r\n                    ,N'VIP'\r\n                )");

                            t.HasCheckConstraint("CK_Status", "[Status] IN (\r\n                    N'Available'\r\n                    ,N'Booked'\r\n                    ,N'Purchased'\r\n                )")
                                .HasName("CK_Status1");
                        });
                });

            modelBuilder.Entity("Tickets.Domain.Entities.Section", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("VenueId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VenueId", "Name")
                        .IsUnique();

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("Tickets.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasDiscriminator().HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Tickets.Domain.Entities.Venue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SpotName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.ToTable("Venues");
                });

            modelBuilder.Entity("Tickets.Domain.Entities.Manager", b =>
                {
                    b.HasBaseType("Tickets.Domain.Entities.User");

                    b.HasDiscriminator().HasValue("Manager");
                });

            modelBuilder.Entity("Tickets.Domain.Entities.Event", b =>
                {
                    b.HasOne("Tickets.Domain.Entities.Manager", "Manager")
                        .WithMany("Events")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Tickets.Domain.Entities.Offer", b =>
                {
                    b.HasOne("Tickets.Domain.Entities.User", "User")
                        .WithMany("Offers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tickets.Domain.Entities.Row", b =>
                {
                    b.HasOne("Tickets.Domain.Entities.Section", "Section")
                        .WithMany("Rows")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Tickets.Domain.Entities.Seat", b =>
                {
                    b.HasOne("Tickets.Domain.Entities.Offer", "Offer")
                        .WithMany("Seats")
                        .HasForeignKey("OfferId");

                    b.HasOne("Tickets.Domain.Entities.PriceLevel", "LevelPrice")
                        .WithMany("Seats")
                        .HasForeignKey("PriceLevel")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tickets.Domain.Entities.Row", "Row")
                        .WithMany("Seats")
                        .HasForeignKey("RowId");

                    b.Navigation("LevelPrice");

                    b.Navigation("Offer");

                    b.Navigation("Row");
                });

            modelBuilder.Entity("Tickets.Domain.Entities.Section", b =>
                {
                    b.HasOne("Tickets.Domain.Entities.Venue", "Venue")
                        .WithMany("Sections")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("Tickets.Domain.Entities.Venue", b =>
                {
                    b.HasOne("Tickets.Domain.Entities.Event", "Event")
                        .WithOne("Venue")
                        .HasForeignKey("Tickets.Domain.Entities.Venue", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Tickets.Domain.Entities.Event", b =>
                {
                    b.Navigation("Venue")
                        .IsRequired();
                });

            modelBuilder.Entity("Tickets.Domain.Entities.Offer", b =>
                {
                    b.Navigation("Seats");
                });

            modelBuilder.Entity("Tickets.Domain.Entities.PriceLevel", b =>
                {
                    b.Navigation("Seats");
                });

            modelBuilder.Entity("Tickets.Domain.Entities.Row", b =>
                {
                    b.Navigation("Seats");
                });

            modelBuilder.Entity("Tickets.Domain.Entities.Section", b =>
                {
                    b.Navigation("Rows");
                });

            modelBuilder.Entity("Tickets.Domain.Entities.User", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("Tickets.Domain.Entities.Venue", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("Tickets.Domain.Entities.Manager", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
